name: Project CI
on:
  push:
    branches:
      - main

jobs:
  run-check_before_commit-scripts:
    name: Run all scripts in check before commit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Check line count
        run: |     
          echo "Checking lines of code in each file"
          MAX_LINES=500
          for file in $(git ls-files); do
            if [[ "$file" != *".pylintrc"* ]] && [[ "$file" != *"airflow.cfg"* ]]; then
              line_count=$(wc -l < "$file")
              if [ "$line_count" -gt "$MAX_LINES" ]; then
                echo "::error file=$file::File $file has $line_count lines, which exceeds the threshold of $MAX_LINES lines."
                exit 1  # Exit if any file exceeds the line limit
              fi
            fi
          done

      - name: Check lines of code changes
        run: |
            MAX_CHANGE_LINES=200
            # Ensure full clone is fetched
            git fetch origin main

            # Get the latest commit on origin/main before the push
            LAST_MAIN_COMMIT=$(git rev-parse origin/main)

            # Get the latest commit on the current branch (might be main or a feature branch)
            CURRENT_COMMIT=$(git rev-parse HEAD)

            # If the commits are the same, this means we're pushing directly to main
            if [ "$LAST_MAIN_COMMIT" = "$CURRENT_COMMIT" ]; then
              echo "Direct push to main detected. Comparing the last commit on main with the previous commit."
              DIFF_RANGE="HEAD^1..HEAD"
            else
              # Comparing changes between the feature branch and main
              echo "Feature branch push detected. Comparing origin/main with current branch."
              DIFF_RANGE="origin/main..HEAD"
            fi

            # Calculate changes (added + deleted lines)
            CHANGES=$(git diff --numstat "$DIFF_RANGE" | awk '{added+=$1; deleted+=$2} END {print added+deleted}')
              
            # Check for change limit
            if [ -n "$CHANGES" ] && [ "$CHANGES" -gt "$MAX_CHANGE_LINES" ]; then
              echo "::error::Too many changes: $CHANGES lines. Maximum allowed: $MAX_CHANGE_LINES lines."
              exit 1
            else
              echo "Number of changed lines: $CHANGES"
            fi


  check_install_library_and_run_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10.x]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache python installation
        id: cache-python
        uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}
      - name: Install dependencies
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          python3 -m pip install -e ".[dev]"

      - name: Lint with flake8, mypy and pylint
        env:
          CODE_DIRECTORY: ./extractfeature/
        run: |
          flake8 $CODE_DIRECTORY
          mypy --show-traceback $CODE_DIRECTORY
          pylint $CODE_DIRECTORY

      - name: Run tests
        run: |
          pytest -s --durations=0 --disable-warnings ./extractfeature/tests/
